{"status":"ok","feed":{"url":"https://medium.com/feed/@hqtoan94","title":"Stories by Toan Ho on Medium","link":"https://medium.com/@hqtoan94?source=rss-e56a0b21d03b------2","author":"","description":"Stories by Toan Ho on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*pOIBCpuW16HLIukRBD4g4Q.jpeg"},"items":[{"title":"\u201cI don\u2019t know\u201d\u200a\u2014\u200aA great Nexus event","pubDate":"2023-11-10 02:52:22","link":"https://hqtoan94.medium.com/i-dont-know-a-great-nexus-event-7f0dea4f66d4?source=rss-e56a0b21d03b------2","guid":"https://medium.com/p/7f0dea4f66d4","author":"Toan Ho","thumbnail":"","description":"\n<h3>\u201cI don\u2019t know\u201d\u200a\u2014\u200aA great Nexus\u00a0event</h3>\n<h4>Taking the Leap Towards Personal\u00a0Growth</h4>\n<p>If you\u2019ve had the chance to watch the Loki TV Series, the concept of a <a href=\"https://en.wikipedia.org/wiki/The_Nexus_Event\">Nexus event</a> would be familiar. For those who haven\u2019t, a Nexus event is a point in time where your decision spawns a variant of yourself in a different timeline. While I\u2019m unsure if multiple timelines exist in the real world, the notion of evolving into a better version has caught my attention. Saying \u2018I don\u2019t know\u2019 can be likened to a Nexus event, as the subsequent actions stemming from this admission could lead us to various versions of ourselves. Let\u2019s see how we can shift our mind so that we can make a decision where we could end up having a better version of ourself by using \u201cI don\u2019t know\u201d\u00a0moments.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EGbY3egx34l6Bq3f\"><figcaption>Photo by <a href=\"https://unsplash.com/@perfectmirror?utm_source=medium&amp;utm_medium=referral\">PerfectMirror</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Curiosity: Navigating Uncharted Territories</h3>\n<p>I hold great admiration for the movie \u201cThe Pursuit of Happyness,\u201d particularly a scene where Christopher addresses a hiring committee about his character.</p>\n<blockquote>I\u2019m the type of person that if you ask me a question and I don\u2019t know the answer, I\u2019m gonna tell you that I don\u2019t know. But I bet you what, I know how to find the answer and I will find the answer.\u200a\u2014\u200aChristopher Gardner</blockquote>\n<p>Rather than viewing \u2018I don\u2019t know\u2019 as a dead end, he demonstrated to the hiring committee his eagerness to embrace curiosity and delve into the unknown, the uncharted territories. This virtue, highly sought after by companies aiming to expand and thrive, earned him an internship. Subsequently, he validated its effectiveness by successfully completing the training and securing a job he had no prior knowledge of before applying for the internship. The way Chris has showed his curiosity skill strongly described that he\u2019s really firm at his own territory for the familiar and unfamiliar. And when the uncharted territory appeared, he\u2019s not hesitated to explore it to find the answer. That\u2019s part of the skill that we all should have so when we don\u2019t know what\u2019s next, it could be a sign of new territory awaiting our exploration.</p>\n<p>And since it\u2019s a skill, we should learn and practice it so we won\u2019t underuse it and won\u2019t overuse it either. Underusing it will keep you in your small territory and limit your experience with new things. It will also prevent you from gaining things that you expected. Overusing it will burden us with lots of thoughts, leaving us with no time to organize before introducing new things. That\u2019s why curiosity is a skill instead of just a personal\u00a0trait.</p>\n<figure><img alt=\"Balance\" src=\"https://cdn-images-1.medium.com/max/1024/0*JLOloOgSjPGc6K-q\"><figcaption>Photo by <a href=\"https://unsplash.com/@milada_vigerova?utm_source=medium&amp;utm_medium=referral\">Milada Vigerova</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Leveraging the \u201cI Don\u2019t Know\u201d\u00a0Moments</h3>\n<ul><li><strong>Explore the Unknown Unknowns territory</strong></li></ul>\n<p>When you go and ask a child who haven\u2019t joined primary school with 1 plus 1, without any prior lesson from their parent or sort of, it\u2019s gonna be the hardest question ever with them and at that time, it\u2019s simply a huge unknown territory for the child, Math, something that\u2019s never exist in their head. But after joining primary school and graduating from it, the child will know. He will know about Math, about 1 plus 1 is 2. And even more like 5 multiply with 5 is 25. Which is the same development method that we called: Education. They\u2019ve been taught, coached, consulted to know make those calculations and about lots of other things. It\u2019s simply the way the world work, previous generation teach the next generation what they have done and the next generation try best to adapt and learn to do it\u00a0better.</p>\n<p>It\u2019s not always easy because finding good external guidance, teachers, and coaches can be challenging, and also there are territories where we have to accept the existence of it, such as <a href=\"https://www.youtube.com/watch?v=4gAzjzYIMSM\">zero doesn\u2019t exist</a>. So beside having a good guidance, we also need to learn to accept the unknown territory that we\u2019re all accept, and also need to teach yourself the self-taught skill. These ones won\u2019t help you to classify things because it\u2019s the unknowns but it will help you to cluster your knowledge for other things to\u00a0come.</p>\n<p>That\u2019s for the unknown unknowns, how about things you already work on, and things you already know about but you haven\u2019t dive deep enough which cause the \u201cI don\u2019t know\u201d answer when questions come?</p>\n<ul><li><strong>Explore the Known Unknowns territory</strong></li></ul>\n<p>Bruce Lee once\u00a0said:</p>\n<blockquote>I fear not the man who has practiced 10,000 kicks once, but I fear the man who has practiced one kick 10,000\u00a0times.</blockquote>\n<p>We could explore 10000 unknown kicks by searching around, but to fully understand one from the inside out, it needs lots of practice not just do it again and again but do it with reflection so that after exploring that kick. You know the kick, but <strong>you know</strong> that <strong>you don\u2019t know</strong> about the power needs for that kick, practice it. Same for other factors such as the balance, the speed, etc. And for other skills that we\u2019re all doing these days for living, it\u2019s the same. And the progress of exploring these territories will lead to\u00a0mastery.</p>\n<p>But it\u2019s not that easy if we fall into the illusion of knowing. And the most famous one that I\u2019ve observe is the Dunning-Kruger effect.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/813/0*9ybSWy-h6AL7KYes.jpg\"><figcaption>Image from <a href=\"https://www.theoptimumdrive.com/\">https://www.theoptimumdrive.com/</a></figcaption></figure><p>As a Software Engineer, learn and get something work is a \u201cmust have\u201d skill. But with very comprehensive documentation, clear guidelines, it\u2019s easy for an engineer to setup a project to serve for a business requirement. But the warnings come after the spell. When the beginning work is easy and all the hard parts have been hidden by interfaces, it gives them this illusion of knowing. It\u2019s like a fixed boundary which prevent one to explore any new territory. So be aware of this and overcome this also something we need to keep in mind. A practice that I\u2019ve used usually to deal with this effect is using the prior knowledge (the knowns) to raise questions so that we can see the essential ideas that haven\u2019t been revealed (the unknowns). Like Python, I\u2019ve created a web app with Python to serve many users and I know that Python use GIL to take care of concurrency in Python. So when I learn about JavaScript and NodeJS, I also ask, how NodeJS handle multiple users and turn out it\u2019s having event loop mechanism. So the known could lead us to the known unknowns\u00a0also.</p>\n<h3>\u201cI don\u2019t know\u201d what\u2019s\u00a0next</h3>\n<p>Dealing with knowledge is also a game when we have to deal with the source of the knowledge from outside, the cognitive bias from inside to be able to go along on the mastery path. We\u2019re all know that it\u2019s not easy but it\u2019s not that hard to skip it. Just enjoy the feeling of not knowing, enjoy saying \u201cI don\u2019t know\u201d, embrace the unknown and then take the responsibility to work on your personal growth with these\u00a0tips:</p>\n<ul>\n<li>Find good guidance from good teachers, good coaches (you could see how to find it in this book: <a href=\"https://www.goodreads.com/en/book/show/81940\">Mastery by George\u00a0Leonard</a>)</li>\n<li>Be self-taught, self-learning (normally people will put a course in here for advertising but I\u2019m not having one so maybe later\u00a0haha)</li>\n<li>Accept some unknown knowledge for known things to\u00a0come</li>\n<li>Practice with the sincerely to\u00a0learn</li>\n<li>Raise self-questions and seek\u00a0answers</li>\n</ul>\n<h4>Thanks for\u00a0reading,</h4>\n<p>I\u2019m here to help myself and others to know more about Software Engineer.</p>\n<ul>\n<li>\n<em>Be sure to </em><strong><em>applaud</em></strong><em> and </em><strong><em>follow</em></strong><em>!\u00a0\ud83d\udc4f</em>\n</li>\n<li>\n<em>Follow me on\u00a0</em><a href=\"http://linkedin.com/in/hqtoan94/\"><strong><em>LinkedIn</em></strong></a>\n</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f0dea4f66d4\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>\u201cI don\u2019t know\u201d\u200a\u2014\u200aA great Nexus\u00a0event</h3>\n<h4>Taking the Leap Towards Personal\u00a0Growth</h4>\n<p>If you\u2019ve had the chance to watch the Loki TV Series, the concept of a <a href=\"https://en.wikipedia.org/wiki/The_Nexus_Event\">Nexus event</a> would be familiar. For those who haven\u2019t, a Nexus event is a point in time where your decision spawns a variant of yourself in a different timeline. While I\u2019m unsure if multiple timelines exist in the real world, the notion of evolving into a better version has caught my attention. Saying \u2018I don\u2019t know\u2019 can be likened to a Nexus event, as the subsequent actions stemming from this admission could lead us to various versions of ourselves. Let\u2019s see how we can shift our mind so that we can make a decision where we could end up having a better version of ourself by using \u201cI don\u2019t know\u201d\u00a0moments.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*EGbY3egx34l6Bq3f\"><figcaption>Photo by <a href=\"https://unsplash.com/@perfectmirror?utm_source=medium&amp;utm_medium=referral\">PerfectMirror</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Curiosity: Navigating Uncharted Territories</h3>\n<p>I hold great admiration for the movie \u201cThe Pursuit of Happyness,\u201d particularly a scene where Christopher addresses a hiring committee about his character.</p>\n<blockquote>I\u2019m the type of person that if you ask me a question and I don\u2019t know the answer, I\u2019m gonna tell you that I don\u2019t know. But I bet you what, I know how to find the answer and I will find the answer.\u200a\u2014\u200aChristopher Gardner</blockquote>\n<p>Rather than viewing \u2018I don\u2019t know\u2019 as a dead end, he demonstrated to the hiring committee his eagerness to embrace curiosity and delve into the unknown, the uncharted territories. This virtue, highly sought after by companies aiming to expand and thrive, earned him an internship. Subsequently, he validated its effectiveness by successfully completing the training and securing a job he had no prior knowledge of before applying for the internship. The way Chris has showed his curiosity skill strongly described that he\u2019s really firm at his own territory for the familiar and unfamiliar. And when the uncharted territory appeared, he\u2019s not hesitated to explore it to find the answer. That\u2019s part of the skill that we all should have so when we don\u2019t know what\u2019s next, it could be a sign of new territory awaiting our exploration.</p>\n<p>And since it\u2019s a skill, we should learn and practice it so we won\u2019t underuse it and won\u2019t overuse it either. Underusing it will keep you in your small territory and limit your experience with new things. It will also prevent you from gaining things that you expected. Overusing it will burden us with lots of thoughts, leaving us with no time to organize before introducing new things. That\u2019s why curiosity is a skill instead of just a personal\u00a0trait.</p>\n<figure><img alt=\"Balance\" src=\"https://cdn-images-1.medium.com/max/1024/0*JLOloOgSjPGc6K-q\"><figcaption>Photo by <a href=\"https://unsplash.com/@milada_vigerova?utm_source=medium&amp;utm_medium=referral\">Milada Vigerova</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h3>Leveraging the \u201cI Don\u2019t Know\u201d\u00a0Moments</h3>\n<ul><li><strong>Explore the Unknown Unknowns territory</strong></li></ul>\n<p>When you go and ask a child who haven\u2019t joined primary school with 1 plus 1, without any prior lesson from their parent or sort of, it\u2019s gonna be the hardest question ever with them and at that time, it\u2019s simply a huge unknown territory for the child, Math, something that\u2019s never exist in their head. But after joining primary school and graduating from it, the child will know. He will know about Math, about 1 plus 1 is 2. And even more like 5 multiply with 5 is 25. Which is the same development method that we called: Education. They\u2019ve been taught, coached, consulted to know make those calculations and about lots of other things. It\u2019s simply the way the world work, previous generation teach the next generation what they have done and the next generation try best to adapt and learn to do it\u00a0better.</p>\n<p>It\u2019s not always easy because finding good external guidance, teachers, and coaches can be challenging, and also there are territories where we have to accept the existence of it, such as <a href=\"https://www.youtube.com/watch?v=4gAzjzYIMSM\">zero doesn\u2019t exist</a>. So beside having a good guidance, we also need to learn to accept the unknown territory that we\u2019re all accept, and also need to teach yourself the self-taught skill. These ones won\u2019t help you to classify things because it\u2019s the unknowns but it will help you to cluster your knowledge for other things to\u00a0come.</p>\n<p>That\u2019s for the unknown unknowns, how about things you already work on, and things you already know about but you haven\u2019t dive deep enough which cause the \u201cI don\u2019t know\u201d answer when questions come?</p>\n<ul><li><strong>Explore the Known Unknowns territory</strong></li></ul>\n<p>Bruce Lee once\u00a0said:</p>\n<blockquote>I fear not the man who has practiced 10,000 kicks once, but I fear the man who has practiced one kick 10,000\u00a0times.</blockquote>\n<p>We could explore 10000 unknown kicks by searching around, but to fully understand one from the inside out, it needs lots of practice not just do it again and again but do it with reflection so that after exploring that kick. You know the kick, but <strong>you know</strong> that <strong>you don\u2019t know</strong> about the power needs for that kick, practice it. Same for other factors such as the balance, the speed, etc. And for other skills that we\u2019re all doing these days for living, it\u2019s the same. And the progress of exploring these territories will lead to\u00a0mastery.</p>\n<p>But it\u2019s not that easy if we fall into the illusion of knowing. And the most famous one that I\u2019ve observe is the Dunning-Kruger effect.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/813/0*9ybSWy-h6AL7KYes.jpg\"><figcaption>Image from <a href=\"https://www.theoptimumdrive.com/\">https://www.theoptimumdrive.com/</a></figcaption></figure><p>As a Software Engineer, learn and get something work is a \u201cmust have\u201d skill. But with very comprehensive documentation, clear guidelines, it\u2019s easy for an engineer to setup a project to serve for a business requirement. But the warnings come after the spell. When the beginning work is easy and all the hard parts have been hidden by interfaces, it gives them this illusion of knowing. It\u2019s like a fixed boundary which prevent one to explore any new territory. So be aware of this and overcome this also something we need to keep in mind. A practice that I\u2019ve used usually to deal with this effect is using the prior knowledge (the knowns) to raise questions so that we can see the essential ideas that haven\u2019t been revealed (the unknowns). Like Python, I\u2019ve created a web app with Python to serve many users and I know that Python use GIL to take care of concurrency in Python. So when I learn about JavaScript and NodeJS, I also ask, how NodeJS handle multiple users and turn out it\u2019s having event loop mechanism. So the known could lead us to the known unknowns\u00a0also.</p>\n<h3>\u201cI don\u2019t know\u201d what\u2019s\u00a0next</h3>\n<p>Dealing with knowledge is also a game when we have to deal with the source of the knowledge from outside, the cognitive bias from inside to be able to go along on the mastery path. We\u2019re all know that it\u2019s not easy but it\u2019s not that hard to skip it. Just enjoy the feeling of not knowing, enjoy saying \u201cI don\u2019t know\u201d, embrace the unknown and then take the responsibility to work on your personal growth with these\u00a0tips:</p>\n<ul>\n<li>Find good guidance from good teachers, good coaches (you could see how to find it in this book: <a href=\"https://www.goodreads.com/en/book/show/81940\">Mastery by George\u00a0Leonard</a>)</li>\n<li>Be self-taught, self-learning (normally people will put a course in here for advertising but I\u2019m not having one so maybe later\u00a0haha)</li>\n<li>Accept some unknown knowledge for known things to\u00a0come</li>\n<li>Practice with the sincerely to\u00a0learn</li>\n<li>Raise self-questions and seek\u00a0answers</li>\n</ul>\n<h4>Thanks for\u00a0reading,</h4>\n<p>I\u2019m here to help myself and others to know more about Software Engineer.</p>\n<ul>\n<li>\n<em>Be sure to </em><strong><em>applaud</em></strong><em> and </em><strong><em>follow</em></strong><em>!\u00a0\ud83d\udc4f</em>\n</li>\n<li>\n<em>Follow me on\u00a0</em><a href=\"http://linkedin.com/in/hqtoan94/\"><strong><em>LinkedIn</em></strong></a>\n</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f0dea4f66d4\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["personal-development","personal-growth"]},{"title":"Unit testing, Why?","pubDate":"2022-10-24 01:01:44","link":"https://hqtoan94.medium.com/unit-testing-why-69b81982399b?source=rss-e56a0b21d03b------2","guid":"https://medium.com/p/69b81982399b","author":"Toan Ho","thumbnail":"","description":"\n<p>It costs less than you think to deliver working software with unit\u00a0tests.</p>\n<p>I\u2019ve had a couple of ideas describing Unit testing for some target audiences who I thought they haven\u2019t understood Unit testing. But the more I think about how I should describe Unit testing, the more I got confused about what should I say, and things got complicated every time I continue on the idea. So instead of writing just for some audiences just to make me feel good, I\u2019ve decided to just write this for myself and for you so that we could see if we can have some common ideas on Unit\u00a0testing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/466/1*9skw8tSuimBoaWrONOlWbg.png\"><figcaption>The Test Pyramid on <a href=\"https://martinfowler.com/articles/practical-test-pyramid.html\">https://martinfowler.com</a></figcaption></figure><p>Has been mentioned in the Test Pyramid, a common concept in software testing which has been created by Mike Cohn back in 2003. Unit tests play a big role in the pyramid which has the highest isolation and the fastest implementation.</p>\n<h3>Test structure</h3>\n<ol>\n<li>Setup test environment and test\u00a0data</li>\n<li>Call the testing\u00a0function</li>\n<li>Assert the\u00a0result</li>\n</ol>\n<p>This structure applies to all kinds of tests, not limited to unit tests only. The difference is only the scope, and the size of the function you want to test. It could be a simple method, it could be a module, could be a component, or a system. Those 3 steps can be simplified as: \u201cArrange, Act and Assert\u201d. Firstly, you arrange your mock data, and spy on objects/methods. Secondly, you would call the testing method, with those mocked data. Finally, you would expect that the result is as expected, and the spied stuff has been\u00a0called.</p>\n<p>If you\u2019re not familiar with that structure, I would suggest that you should start to write some unit tests for your project then you will catch up with the structure right away after finishing some test\u00a0suites.</p>\n<p>But in this article, we will focus on the Why instead of focusing on the How. Why do we need Unit testing, why do people keep saying that Unit testing is a must-have in Software development?</p>\n<p><strong>Code coverage, test coverage, and software\u00a0quality:</strong></p>\n<blockquote><em>\u201cCode without tests is broken by design\u201d\u200a\u2014\u200aJacob Kaplan-Moss</em></blockquote>\n<p>These concepts are too common in Software Engineering, I\u2019ve asked and been asked in lots of interviews. And this is also one of my favorite criteria I want to assess candidates during an interview. It helps me to see how a developer thinks about software quality and how they\u2019ve contributed to maintaining the quality of the software by using code coverage and test coverage.</p>\n<p>Most people get confused between code coverage and test coverage. Since those 2 concepts play very different roles in software quality. Code coverage focuses more on the line of code that has been tested while test coverage focuses more on the number of use cases of the feature that has been tested. Understanding these concepts could help you to differentiate them so that you could write highly testable code to increase the code coverage and could write test scripts with high test coverage to contribute to the test plan and test strategy of your\u00a0team.</p>\n<p><strong>Test-driven development (TDD):</strong></p>\n<p>Writing tests after developing the functionality seems a little bit redundant for most of the developers (at least most developers that I\u2019ve talked to) and even for me in the early days when I started using unit tests. It\u2019s reasonable, right? Because we have finished all the development works, and have covered all of the use cases in the code. We tested it, again and again already, then why do we need to write a unit test just to test it again? There are a lot of benefits behind writing unit tests (I haven\u2019t mentioned anything about TDD yet, OMG, what I\u2019m talking about), it could help\u00a0you:</p>\n<ul>\n<li>Increase confidence when delivering the\u00a0work</li>\n<li>Prevent duplication work on manual\u00a0testing</li>\n<li>Make sure that it\u2019s testable\u00a0code</li>\n<li>Mitigate the fear of updating the existing\u00a0code</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u3dujpEnufi324TsCF6OJA.png\"><figcaption>Test-driven development on <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">https://en.wikipedia.org</a></figcaption></figure><p>But even when we know these benefits of unit tests, it still pains in the *ss when we need to write tests after\u00a0coding.</p>\n<p>And then, TDD comes as a cure for that problem (at least for me). Instead of writing unit tests after the coding part, we now write them even before we have any line of code. It helps you on organizing your thoughts before writing code. With it, you could think about all the possible inputs and all expected outputs in advance, and you could share this with your peer so that you both can review it even before coding it so that it could be accurate with what you want to deliver and surprisingly, it also increase the coverage of your test scripts and because you have handled test coverage first, then code coverage can also be covered right after you fulfill all those\u00a0tests.</p>\n<p>The process will be like\u00a0this:</p>\n<ol>\n<li>Write a test case, and execute it to make it\u00a0red</li>\n<li>Run the test to see the expected failure\u00a0messages</li>\n<li>Write code for the test case. Test coverage and code coverage are both covered in\u00a0advance</li>\n<li>Refactor if needed and rerun the test, making sure that it\u2019s still\u00a0green</li>\n<li>Repeat step\u00a01</li>\n</ol>\n<p>Applying TDD doesn\u2019t guarantee that the coding speed will significantly increase. It might seem a little bit slow at the beginning, but day by day, when you have enriched your test scripts, you can reuse the existing ones and the speed will be pretty quick. The real benefit of TDD in my opinion\u00a0are:</p>\n<ul>\n<li>Helps you think before starting to write\u00a0code</li>\n<li>Improves the effectiveness of pair programming by thinking together before starting to write\u00a0code</li>\n<li>Thinking before coding also improves the test coverage of your\u00a0tests</li>\n</ul>\n<p>TDD also has something to do with Extreme Programming (XP) methodology, an Agile process that has some values that enterprises want just the same as Scrum. Lots of enterprises are applying this by combining XP and Scrum to gain the highest value for their teams and their products. It has been described well in this book: <a href=\"https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/\">https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/</a>, check it out if you\u2019re interested in Agile processes.</p>\n<p><strong>Troubleshooting:</strong></p>\n<p>This is my favorite part of leveraging unit tests (and also other kinds of tests). Whenever I receive a defect from Quality Engineer (QE), or even from the Production environment, my first thing to do is use the data that cause the issue and put it right away into the arrangement part of the test structure. And guess what, I can find the problem easily by leveraging existing test scripts. And from that, I just need to apply TDD the same as when we develop new functions in our codebase. I will first figure out which is the correct behavior by communicating with Business Analyst (BA) or Product Owner (PO) and then just arrange the data for the test. After arranging the test data, execute it to make sure that it fails as expected. Then write new code changes to pass the test. Refactor if\u00a0needed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4cDpRO2lF0f_wMv7\"><figcaption>Photo by <a href=\"https://unsplash.com/@evgenit?utm_source=medium&amp;utm_medium=referral\">Evgeni Tcherkasski</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>This seems lazy a little bit but I think in terms of efficiency and effectiveness, this approach can achieve both of them. And guess what, by confirming the correct behavior, it will cover more on test coverage too. There is no reason to jump right into the code, read it, and pray for the bug to appear on our faces, right? The problem only happens when we run the code so I believe it\u2019s better if we just need to run the unit that we want it to be\u00a0run.</p>\n<p>Just to claim that this only works when you know which scope causes the problem. Sometimes it\u2019s e2e level, sometimes it\u2019s integration level, and I really wish that your unit test are great enough so that you could find it at the unit\u00a0level.</p>\n<p><strong>Refactoring and feature removing:</strong></p>\n<p>We\u2019ve already done the refactoring part during TDD, but I still want to mention it here. Because sometimes, it\u2019s not only related to code refactoring, but it\u2019s also about the library replacing, solution changes, non-functional issues, etc. And whenever you need this, unit tests will play a big role in making sure that your changes won\u2019t break the existing logic of the function. No matter what you refactor, the expected output should remain as is, the spied method could be changed, but the expected out shouldn\u2019t be.</p>\n<p>Apart from refactoring when we want to remove features, and remove redundant codes, unit tests could be something we can rely on to press the delete button. By leveraging code coverage, whenever we don\u2019t need any functional or any code from our codebase, we can just delete all the related unit tests, and execute all unit tests to get the coverage report. And any line of code that hasn\u2019t been covered could be removed without a second thought. Execute the unit test again after removing and if it\u2019s all green, then 99.99% you can confident to ship the changes. Let\u2019s have 0.01% left for checking human errors\u00a0\ud83d\ude06.</p>\n<p><strong>DevOps &amp;\u00a0CI/CD:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sxnbQy2CvLvZC9ojm3GDRQ.png\"><figcaption>DevOps pipeline on <a href=\"https://www.atlassian.com/devops/devops-tools/devops-pipeline\">https://www.atlassian.com</a></figcaption></figure><p>DevOps embraces automation testing as it\u2019s an enabler for DevOps. With Continuous Integration, automation testing plays a big role in making sure that the application can integrate continuously. And happily, the unit test is a part of the automation test as you can see in the Test pyramid. The test coverage can\u2019t be covered by unit test only, but as you can see in the pyramid, the unit test takes a bit part of the pyramid. It means that with enough unit tests, we can maximize the test coverage for our application. And when we do so, our CI pipeline could be reliable and it will reduce the time to deliver without sacrificing the quality of the application.</p>\n<p><strong>Takeaway</strong></p>\n<p>If the quality of your application is not important. Feel free to skip unit testing. But if it matters, unit testing can be a great tool to improve the quality of your software, just learn to use it the right way. We can\u2019t say that a bike is slow because we walk with it instead of riding\u00a0it.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69b81982399b\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>It costs less than you think to deliver working software with unit\u00a0tests.</p>\n<p>I\u2019ve had a couple of ideas describing Unit testing for some target audiences who I thought they haven\u2019t understood Unit testing. But the more I think about how I should describe Unit testing, the more I got confused about what should I say, and things got complicated every time I continue on the idea. So instead of writing just for some audiences just to make me feel good, I\u2019ve decided to just write this for myself and for you so that we could see if we can have some common ideas on Unit\u00a0testing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/466/1*9skw8tSuimBoaWrONOlWbg.png\"><figcaption>The Test Pyramid on <a href=\"https://martinfowler.com/articles/practical-test-pyramid.html\">https://martinfowler.com</a></figcaption></figure><p>Has been mentioned in the Test Pyramid, a common concept in software testing which has been created by Mike Cohn back in 2003. Unit tests play a big role in the pyramid which has the highest isolation and the fastest implementation.</p>\n<h3>Test structure</h3>\n<ol>\n<li>Setup test environment and test\u00a0data</li>\n<li>Call the testing\u00a0function</li>\n<li>Assert the\u00a0result</li>\n</ol>\n<p>This structure applies to all kinds of tests, not limited to unit tests only. The difference is only the scope, and the size of the function you want to test. It could be a simple method, it could be a module, could be a component, or a system. Those 3 steps can be simplified as: \u201cArrange, Act and Assert\u201d. Firstly, you arrange your mock data, and spy on objects/methods. Secondly, you would call the testing method, with those mocked data. Finally, you would expect that the result is as expected, and the spied stuff has been\u00a0called.</p>\n<p>If you\u2019re not familiar with that structure, I would suggest that you should start to write some unit tests for your project then you will catch up with the structure right away after finishing some test\u00a0suites.</p>\n<p>But in this article, we will focus on the Why instead of focusing on the How. Why do we need Unit testing, why do people keep saying that Unit testing is a must-have in Software development?</p>\n<p><strong>Code coverage, test coverage, and software\u00a0quality:</strong></p>\n<blockquote><em>\u201cCode without tests is broken by design\u201d\u200a\u2014\u200aJacob Kaplan-Moss</em></blockquote>\n<p>These concepts are too common in Software Engineering, I\u2019ve asked and been asked in lots of interviews. And this is also one of my favorite criteria I want to assess candidates during an interview. It helps me to see how a developer thinks about software quality and how they\u2019ve contributed to maintaining the quality of the software by using code coverage and test coverage.</p>\n<p>Most people get confused between code coverage and test coverage. Since those 2 concepts play very different roles in software quality. Code coverage focuses more on the line of code that has been tested while test coverage focuses more on the number of use cases of the feature that has been tested. Understanding these concepts could help you to differentiate them so that you could write highly testable code to increase the code coverage and could write test scripts with high test coverage to contribute to the test plan and test strategy of your\u00a0team.</p>\n<p><strong>Test-driven development (TDD):</strong></p>\n<p>Writing tests after developing the functionality seems a little bit redundant for most of the developers (at least most developers that I\u2019ve talked to) and even for me in the early days when I started using unit tests. It\u2019s reasonable, right? Because we have finished all the development works, and have covered all of the use cases in the code. We tested it, again and again already, then why do we need to write a unit test just to test it again? There are a lot of benefits behind writing unit tests (I haven\u2019t mentioned anything about TDD yet, OMG, what I\u2019m talking about), it could help\u00a0you:</p>\n<ul>\n<li>Increase confidence when delivering the\u00a0work</li>\n<li>Prevent duplication work on manual\u00a0testing</li>\n<li>Make sure that it\u2019s testable\u00a0code</li>\n<li>Mitigate the fear of updating the existing\u00a0code</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u3dujpEnufi324TsCF6OJA.png\"><figcaption>Test-driven development on <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">https://en.wikipedia.org</a></figcaption></figure><p>But even when we know these benefits of unit tests, it still pains in the *ss when we need to write tests after\u00a0coding.</p>\n<p>And then, TDD comes as a cure for that problem (at least for me). Instead of writing unit tests after the coding part, we now write them even before we have any line of code. It helps you on organizing your thoughts before writing code. With it, you could think about all the possible inputs and all expected outputs in advance, and you could share this with your peer so that you both can review it even before coding it so that it could be accurate with what you want to deliver and surprisingly, it also increase the coverage of your test scripts and because you have handled test coverage first, then code coverage can also be covered right after you fulfill all those\u00a0tests.</p>\n<p>The process will be like\u00a0this:</p>\n<ol>\n<li>Write a test case, and execute it to make it\u00a0red</li>\n<li>Run the test to see the expected failure\u00a0messages</li>\n<li>Write code for the test case. Test coverage and code coverage are both covered in\u00a0advance</li>\n<li>Refactor if needed and rerun the test, making sure that it\u2019s still\u00a0green</li>\n<li>Repeat step\u00a01</li>\n</ol>\n<p>Applying TDD doesn\u2019t guarantee that the coding speed will significantly increase. It might seem a little bit slow at the beginning, but day by day, when you have enriched your test scripts, you can reuse the existing ones and the speed will be pretty quick. The real benefit of TDD in my opinion\u00a0are:</p>\n<ul>\n<li>Helps you think before starting to write\u00a0code</li>\n<li>Improves the effectiveness of pair programming by thinking together before starting to write\u00a0code</li>\n<li>Thinking before coding also improves the test coverage of your\u00a0tests</li>\n</ul>\n<p>TDD also has something to do with Extreme Programming (XP) methodology, an Agile process that has some values that enterprises want just the same as Scrum. Lots of enterprises are applying this by combining XP and Scrum to gain the highest value for their teams and their products. It has been described well in this book: <a href=\"https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/\">https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/</a>, check it out if you\u2019re interested in Agile processes.</p>\n<p><strong>Troubleshooting:</strong></p>\n<p>This is my favorite part of leveraging unit tests (and also other kinds of tests). Whenever I receive a defect from Quality Engineer (QE), or even from the Production environment, my first thing to do is use the data that cause the issue and put it right away into the arrangement part of the test structure. And guess what, I can find the problem easily by leveraging existing test scripts. And from that, I just need to apply TDD the same as when we develop new functions in our codebase. I will first figure out which is the correct behavior by communicating with Business Analyst (BA) or Product Owner (PO) and then just arrange the data for the test. After arranging the test data, execute it to make sure that it fails as expected. Then write new code changes to pass the test. Refactor if\u00a0needed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4cDpRO2lF0f_wMv7\"><figcaption>Photo by <a href=\"https://unsplash.com/@evgenit?utm_source=medium&amp;utm_medium=referral\">Evgeni Tcherkasski</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>This seems lazy a little bit but I think in terms of efficiency and effectiveness, this approach can achieve both of them. And guess what, by confirming the correct behavior, it will cover more on test coverage too. There is no reason to jump right into the code, read it, and pray for the bug to appear on our faces, right? The problem only happens when we run the code so I believe it\u2019s better if we just need to run the unit that we want it to be\u00a0run.</p>\n<p>Just to claim that this only works when you know which scope causes the problem. Sometimes it\u2019s e2e level, sometimes it\u2019s integration level, and I really wish that your unit test are great enough so that you could find it at the unit\u00a0level.</p>\n<p><strong>Refactoring and feature removing:</strong></p>\n<p>We\u2019ve already done the refactoring part during TDD, but I still want to mention it here. Because sometimes, it\u2019s not only related to code refactoring, but it\u2019s also about the library replacing, solution changes, non-functional issues, etc. And whenever you need this, unit tests will play a big role in making sure that your changes won\u2019t break the existing logic of the function. No matter what you refactor, the expected output should remain as is, the spied method could be changed, but the expected out shouldn\u2019t be.</p>\n<p>Apart from refactoring when we want to remove features, and remove redundant codes, unit tests could be something we can rely on to press the delete button. By leveraging code coverage, whenever we don\u2019t need any functional or any code from our codebase, we can just delete all the related unit tests, and execute all unit tests to get the coverage report. And any line of code that hasn\u2019t been covered could be removed without a second thought. Execute the unit test again after removing and if it\u2019s all green, then 99.99% you can confident to ship the changes. Let\u2019s have 0.01% left for checking human errors\u00a0\ud83d\ude06.</p>\n<p><strong>DevOps &amp;\u00a0CI/CD:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sxnbQy2CvLvZC9ojm3GDRQ.png\"><figcaption>DevOps pipeline on <a href=\"https://www.atlassian.com/devops/devops-tools/devops-pipeline\">https://www.atlassian.com</a></figcaption></figure><p>DevOps embraces automation testing as it\u2019s an enabler for DevOps. With Continuous Integration, automation testing plays a big role in making sure that the application can integrate continuously. And happily, the unit test is a part of the automation test as you can see in the Test pyramid. The test coverage can\u2019t be covered by unit test only, but as you can see in the pyramid, the unit test takes a bit part of the pyramid. It means that with enough unit tests, we can maximize the test coverage for our application. And when we do so, our CI pipeline could be reliable and it will reduce the time to deliver without sacrificing the quality of the application.</p>\n<p><strong>Takeaway</strong></p>\n<p>If the quality of your application is not important. Feel free to skip unit testing. But if it matters, unit testing can be a great tool to improve the quality of your software, just learn to use it the right way. We can\u2019t say that a bike is slow because we walk with it instead of riding\u00a0it.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69b81982399b\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["software-quality-testing","unit-testing","software-development","test-driven-development"]}]}